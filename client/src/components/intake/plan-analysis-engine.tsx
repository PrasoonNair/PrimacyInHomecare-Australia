import React, { useState } from 'react';
import { useQuery, useMutation } from '@tanstack/react-query';
import { apiRequest, queryClient } from '@/lib/queryClient';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { useToast } from '@/hooks/use-toast';
import { 
  Brain, 
  FileText, 
  CheckCircle2, 
  AlertTriangle, 
  Users, 
  DollarSign, 
  Target, 
  Clock,
  Send,
  Mail,
  MessageSquare,
  Phone,
  Download,
  Eye,
  Settings,
  Zap,
  BarChart3
} from 'lucide-react';

interface PlanAnalysisResult {
  id: string;
  planId: string;
  participantId: string;
  analysisDate: string;
  priorityGoals: string[];
  supportRequirements: any;
  budgetAllocations: any;
  serviceRecommendations: any;
  riskFactors: string[];
  complexityScore: number;
  canAutoGenerate: boolean;
  manualReviewRequired: boolean;
  reviewReasons: string[];
  recommendedTemplateIds: string[];
  customClausesRequired: boolean;
}

interface AutoGeneratedAgreement {
  id: string;
  planAnalysisId: string;
  serviceAgreementId: string;
  templateId: string;
  generatedContent: string;
  autoQualityScore: number;
  humanReviewRequired: boolean;
  readyForSigning: boolean;
  signingMethod: string;
  recipientContactMethod: string;
}

interface AgreementCommunication {
  id: string;
  communicationType: string;
  recipientType: string;
  recipientName: string;
  recipientContact: string;
  status: string;
  sentAt: string;
  signingUrl: string;
}

interface PlanAnalysisEngineProps {
  planId: string;
  participantId: string;
  onAnalysisComplete?: (result: PlanAnalysisResult) => void;
}

export function PlanAnalysisEngine({ planId, participantId, onAnalysisComplete }: PlanAnalysisEngineProps) {
  const [analysisStep, setAnalysisStep] = useState(0);
  const [showDetails, setShowDetails] = useState(false);
  const { toast } = useToast();

  // Fetch plan data
  const { data: planData } = useQuery({
    queryKey: ['/api/ndis-plans', planId],
    queryFn: () => apiRequest(`/api/ndis-plans/${planId}`)
  });

  // Fetch participant data
  const { data: participantData } = useQuery({
    queryKey: ['/api/participants', participantId],
    queryFn: () => apiRequest(`/api/participants/${participantId}`)
  });

  // Fetch existing analysis
  const { data: analysisResult, refetch: refetchAnalysis } = useQuery<PlanAnalysisResult>({
    queryKey: ['/api/plan-analysis', planId],
    queryFn: () => apiRequest(`/api/plan-analysis/${planId}`)
  });

  // Fetch auto-generated agreements
  const { data: autoAgreements = [] } = useQuery<AutoGeneratedAgreement[]>({
    queryKey: ['/api/auto-agreements', planId],
    queryFn: () => apiRequest(`/api/auto-agreements?planId=${planId}`)
  });

  // Fetch agreement communications
  const { data: communications = [] } = useQuery<AgreementCommunication[]>({
    queryKey: ['/api/agreement-communications', planId],
    queryFn: () => apiRequest(`/api/agreement-communications?planId=${planId}`)
  });

  // Analyze plan mutation
  const analyzePlanMutation = useMutation({
    mutationFn: (data: { planId: string; participantId: string }) =>
      apiRequest('/api/plan-analysis/analyze', {
        method: 'POST',
        body: JSON.stringify(data)
      }),
    onSuccess: (result) => {
      refetchAnalysis();
      onAnalysisComplete?.(result);
      toast({
        title: "Plan Analysis Complete",
        description: "NDIS plan has been analyzed and service recommendations generated.",
      });
    }
  });

  // Generate agreements mutation
  const generateAgreementsMutation = useMutation({
    mutationFn: (analysisId: string) =>
      apiRequest('/api/auto-agreements/generate', {
        method: 'POST',
        body: JSON.stringify({ analysisId })
      }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/auto-agreements'] });
      toast({
        title: "Agreements Generated",
        description: "Service agreements have been automatically generated based on plan analysis.",
      });
    }
  });

  // Send for signing mutation
  const sendForSigningMutation = useMutation({
    mutationFn: (data: { agreementId: string; communicationMethod: string; recipientContact: string }) =>
      apiRequest('/api/agreement-communications/send', {
        method: 'POST',
        body: JSON.stringify(data)
      }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/agreement-communications'] });
      toast({
        title: "Agreement Sent",
        description: "Service agreement has been sent for electronic signature.",
      });
    }
  });

  const handleAnalyzePlan = () => {
    setAnalysisStep(1);
    analyzePlanMutation.mutate({ planId, participantId });
  };

  const handleGenerateAgreements = () => {
    if (analysisResult?.id) {
      generateAgreementsMutation.mutate(analysisResult.id);
    }
  };

  const handleSendForSigning = (agreementId: string, method: string, contact: string) => {
    sendForSigningMutation.mutate({
      agreementId,
      communicationMethod: method,
      recipientContact: contact
    });
  };

  const getComplexityColor = (score: number) => {
    if (score <= 3) return 'text-green-600';
    if (score <= 6) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getComplexityLabel = (score: number) => {
    if (score <= 3) return 'Low Complexity';
    if (score <= 6) return 'Medium Complexity';
    return 'High Complexity';
  };

  return (
    <div className="space-y-6" data-testid="plan-analysis-engine">
      {/* Header */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Brain className="h-5 w-5" />
            <span>Intelligent Plan Analysis & Agreement Generation</span>
            <Badge variant="outline">AI-Powered</Badge>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex justify-between items-center">
            <p className="text-gray-600">
              Analyze NDIS plan details and automatically generate service agreements for e-signature
            </p>
            {!analysisResult && (
              <Button 
                onClick={handleAnalyzePlan}
                disabled={analyzePlanMutation.isPending}
                data-testid="analyze-plan-button"
              >
                <Brain className="h-4 w-4 mr-2" />
                {analyzePlanMutation.isPending ? "Analyzing..." : "Analyze Plan"}
              </Button>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Analysis Progress */}
      {analyzePlanMutation.isPending && (
        <Card>
          <CardContent className="pt-6">
            <div className="space-y-3">
              <div className="flex justify-between text-sm">
                <span>Analyzing NDIS Plan...</span>
                <span>Step {analysisStep}/4</span>
              </div>
              <Progress value={analysisStep * 25} className="w-full" />
              <div className="text-xs text-gray-500">
                {analysisStep === 1 && "Extracting plan goals and requirements..."}
                {analysisStep === 2 && "Analyzing budget allocations and service needs..."}
                {analysisStep === 3 && "Generating service recommendations..."}
                {analysisStep === 4 && "Finalizing analysis and quality checks..."}
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Analysis Results */}
      {analysisResult && (
        <Tabs defaultValue="overview" className="space-y-6">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="overview">Analysis Overview</TabsTrigger>
            <TabsTrigger value="agreements">Generated Agreements</TabsTrigger>
            <TabsTrigger value="communications">E-Signature Status</TabsTrigger>
            <TabsTrigger value="settings">Communication Settings</TabsTrigger>
          </TabsList>

          {/* Overview Tab */}
          <TabsContent value="overview" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {/* Complexity Score */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Plan Complexity</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-center">
                    <div className={`text-3xl font-bold ${getComplexityColor(analysisResult.complexityScore)}`}>
                      {analysisResult.complexityScore}/10
                    </div>
                    <p className="text-sm text-gray-600">{getComplexityLabel(analysisResult.complexityScore)}</p>
                  </div>
                </CardContent>
              </Card>

              {/* Auto-Generation Status */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Auto-Generation</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-center">
                    {analysisResult.canAutoGenerate ? (
                      <div>
                        <CheckCircle2 className="h-8 w-8 text-green-600 mx-auto mb-2" />
                        <p className="text-sm font-medium text-green-600">Ready for Auto-Generation</p>
                      </div>
                    ) : (
                      <div>
                        <AlertTriangle className="h-8 w-8 text-yellow-600 mx-auto mb-2" />
                        <p className="text-sm font-medium text-yellow-600">Manual Review Required</p>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>

              {/* Recommendations Count */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Service Recommendations</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-center">
                    <div className="text-3xl font-bold text-blue-600">
                      {analysisResult.recommendedTemplateIds.length}
                    </div>
                    <p className="text-sm text-gray-600">Agreement templates recommended</p>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Priority Goals */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Target className="h-5 w-5" />
                  Priority Goals Identified
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  {analysisResult.priorityGoals.map((goal, index) => (
                    <div key={index} className="flex items-center gap-2">
                      <Badge variant="outline" className="text-xs">Goal {index + 1}</Badge>
                      <span className="text-sm">{goal}</span>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Risk Factors */}
            {analysisResult.riskFactors.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <AlertTriangle className="h-5 w-5 text-yellow-600" />
                    Risk Factors & Considerations
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    {analysisResult.riskFactors.map((risk, index) => (
                      <Alert key={index}>
                        <AlertTriangle className="h-4 w-4" />
                        <AlertDescription>{risk}</AlertDescription>
                      </Alert>
                    ))}
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Manual Review Reasons */}
            {analysisResult.manualReviewRequired && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Eye className="h-5 w-5 text-orange-600" />
                    Manual Review Required
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    {analysisResult.reviewReasons.map((reason, index) => (
                      <div key={index} className="flex items-center gap-2">
                        <AlertTriangle className="h-4 w-4 text-orange-600" />
                        <span className="text-sm">{reason}</span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Generate Agreements Button */}
            {analysisResult.canAutoGenerate && autoAgreements.length === 0 && (
              <Card>
                <CardContent className="pt-6">
                  <div className="text-center">
                    <Button 
                      onClick={handleGenerateAgreements}
                      disabled={generateAgreementsMutation.isPending}
                      size="lg"
                      data-testid="generate-agreements-button"
                    >
                      <Zap className="h-4 w-4 mr-2" />
                      {generateAgreementsMutation.isPending ? "Generating..." : "Generate Service Agreements"}
                    </Button>
                  </div>
                </CardContent>
              </Card>
            )}
          </TabsContent>

          {/* Generated Agreements Tab */}
          <TabsContent value="agreements" className="space-y-6">
            <div className="grid gap-6">
              {autoAgreements.map(agreement => (
                <Card key={agreement.id}>
                  <CardHeader>
                    <CardTitle className="flex justify-between items-center">
                      <span>Service Agreement #{agreement.id.slice(-8)}</span>
                      <div className="flex gap-2">
                        <Badge variant="outline">
                          Quality Score: {agreement.autoQualityScore}%
                        </Badge>
                        {agreement.readyForSigning ? (
                          <Badge variant="default">Ready for Signing</Badge>
                        ) : (
                          <Badge variant="secondary">Needs Review</Badge>
                        )}
                      </div>
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <p className="text-sm text-gray-600">Template Used</p>
                          <p className="font-medium">Template #{agreement.templateId.slice(-8)}</p>
                        </div>
                        <div>
                          <p className="text-sm text-gray-600">Human Review</p>
                          <p className="font-medium">
                            {agreement.humanReviewRequired ? "Required" : "Not Required"}
                          </p>
                        </div>
                      </div>

                      {agreement.readyForSigning && (
                        <div className="border-t pt-4">
                          <h4 className="font-medium mb-3">Send for E-Signature</h4>
                          <div className="grid grid-cols-3 gap-2">
                            <Button 
                              variant="outline" 
                              size="sm"
                              onClick={() => handleSendForSigning(agreement.id, 'email', participantData?.email)}
                              disabled={!participantData?.email}
                              data-testid={`send-email-${agreement.id}`}
                            >
                              <Mail className="h-4 w-4 mr-2" />
                              Email
                            </Button>
                            <Button 
                              variant="outline" 
                              size="sm"
                              onClick={() => handleSendForSigning(agreement.id, 'sms', participantData?.phone)}
                              disabled={!participantData?.phone}
                              data-testid={`send-sms-${agreement.id}`}
                            >
                              <MessageSquare className="h-4 w-4 mr-2" />
                              SMS
                            </Button>
                            <Button 
                              variant="outline" 
                              size="sm"
                              onClick={() => handleSendForSigning(agreement.id, 'whatsapp', participantData?.phone)}
                              disabled={!participantData?.phone}
                              data-testid={`send-whatsapp-${agreement.id}`}
                            >
                              <Phone className="h-4 w-4 mr-2" />
                              WhatsApp
                            </Button>
                          </div>
                        </div>
                      )}

                      <div className="flex gap-2">
                        <Button variant="outline" size="sm">
                          <Eye className="h-4 w-4 mr-2" />
                          Preview Agreement
                        </Button>
                        <Button variant="outline" size="sm">
                          <Download className="h-4 w-4 mr-2" />
                          Download PDF
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}

              {autoAgreements.length === 0 && (
                <Card>
                  <CardContent className="pt-6">
                    <div className="text-center text-gray-500">
                      <FileText className="h-12 w-12 mx-auto mb-3" />
                      <p>No agreements generated yet</p>
                      <p className="text-sm">Complete plan analysis first to generate agreements</p>
                    </div>
                  </CardContent>
                </Card>
              )}
            </div>
          </TabsContent>

          {/* Communications Tab */}
          <TabsContent value="communications" className="space-y-6">
            <div className="grid gap-4">
              {communications.map(comm => (
                <Card key={comm.id}>
                  <CardContent className="pt-6">
                    <div className="flex justify-between items-center">
                      <div>
                        <h4 className="font-medium">{comm.recipientName}</h4>
                        <p className="text-sm text-gray-600">
                          {comm.communicationType.toUpperCase()} to {comm.recipientContact}
                        </p>
                        <p className="text-xs text-gray-500">
                          Sent: {new Date(comm.sentAt).toLocaleString()}
                        </p>
                      </div>
                      <div className="text-right">
                        <Badge 
                          variant={
                            comm.status === 'signed' ? 'default' :
                            comm.status === 'delivered' ? 'secondary' :
                            comm.status === 'failed' ? 'destructive' :
                            'outline'
                          }
                        >
                          {comm.status}
                        </Badge>
                        {comm.signingUrl && (
                          <Button variant="outline" size="sm" className="mt-2">
                            <Send className="h-4 w-4 mr-2" />
                            View Signing Link
                          </Button>
                        )}
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}

              {communications.length === 0 && (
                <Card>
                  <CardContent className="pt-6">
                    <div className="text-center text-gray-500">
                      <Send className="h-12 w-12 mx-auto mb-3" />
                      <p>No communications sent yet</p>
                      <p className="text-sm">Generate agreements and send for signing</p>
                    </div>
                  </CardContent>
                </Card>
              )}
            </div>
          </TabsContent>

          {/* Settings Tab */}
          <TabsContent value="settings" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Settings className="h-5 w-5" />
                  Communication Preferences
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div>
                    <h4 className="font-medium mb-2">Default Signing Method</h4>
                    <div className="grid grid-cols-3 gap-2">
                      <Button variant="outline" size="sm">Email Priority</Button>
                      <Button variant="outline" size="sm">SMS Priority</Button>
                      <Button variant="outline" size="sm">Multi-Channel</Button>
                    </div>
                  </div>
                  
                  <div>
                    <h4 className="font-medium mb-2">Reminder Schedule</h4>
                    <p className="text-sm text-gray-600">
                      Automatically send reminders after 3 days, 7 days, and 14 days if not signed
                    </p>
                  </div>
                  
                  <div>
                    <h4 className="font-medium mb-2">Escalation Rules</h4>
                    <p className="text-sm text-gray-600">
                      Notify service coordinator if agreement not signed within 21 days
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      )}
    </div>
  );
}