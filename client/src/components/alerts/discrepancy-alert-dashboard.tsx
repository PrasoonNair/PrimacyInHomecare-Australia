import React, { useState } from 'react';
import { useQuery, useMutation } from '@tanstack/react-query';
import { apiRequest, queryClient } from '@/lib/queryClient';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useToast } from '@/hooks/use-toast';
import { 
  AlertTriangle, 
  Shield, 
  Eye, 
  CheckCircle, 
  Clock,
  Users,
  FileText,
  Database,
  Bell,
  Filter,
  Search,
  Calendar,
  User,
  Building
} from 'lucide-react';

interface DiscrepancyAlert {
  id: string;
  verificationId: string;
  applicantName: string;
  documentType: string;
  department: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  field: string;
  documentValue: string;
  systemValue: string;
  message: string;
  createdAt: string;
  resolved: boolean;
  assignedTo: string;
  resolvedBy?: string;
  resolvedAt?: string;
  resolutionNotes?: string;
  autoGenerated: boolean;
}

interface DepartmentSummary {
  department: string;
  totalAlerts: number;
  highPriority: number;
  unresolved: number;
  averageResolutionTime: number;
  lastActivity: string;
}

export function DiscrepancyAlertDashboard() {
  const [selectedAlert, setSelectedAlert] = useState<DiscrepancyAlert | null>(null);
  const [showAlertDetail, setShowAlertDetail] = useState(false);
  const [filterDepartment, setFilterDepartment] = useState<string>('all');
  const [filterSeverity, setFilterSeverity] = useState<string>('all');
  const [showResolved, setShowResolved] = useState(false);
  const { toast } = useToast();

  // Fetch discrepancy alerts
  const { data: alerts = [] } = useQuery<DiscrepancyAlert[]>({
    queryKey: ['/api/verification/discrepancy-alerts'],
    queryFn: () => apiRequest('/api/verification/discrepancy-alerts')
  });

  // Fetch department summaries
  const { data: departmentSummaries = [] } = useQuery<DepartmentSummary[]>({
    queryKey: ['/api/verification/department-summaries'],
    queryFn: () => apiRequest('/api/verification/department-summaries')
  });

  // Resolve alert mutation
  const resolveAlertMutation = useMutation({
    mutationFn: ({ alertId, notes }: { alertId: string; notes: string }) =>
      apiRequest(`/api/verification/resolve-alert/${alertId}`, {
        method: 'POST',
        body: JSON.stringify({ resolutionNotes: notes })
      }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/verification/discrepancy-alerts'] });
      queryClient.invalidateQueries({ queryKey: ['/api/verification/department-summaries'] });
      setShowAlertDetail(false);
      toast({
        title: "Alert Resolved",
        description: "The discrepancy alert has been marked as resolved.",
      });
    }
  });

  // Assign alert mutation
  const assignAlertMutation = useMutation({
    mutationFn: ({ alertId, assignee }: { alertId: string; assignee: string }) =>
      apiRequest(`/api/verification/assign-alert/${alertId}`, {
        method: 'POST',
        body: JSON.stringify({ assignedTo: assignee })
      }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/verification/discrepancy-alerts'] });
      toast({
        title: "Alert Assigned",
        description: "The alert has been assigned successfully.",
      });
    }
  });

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-600 text-white';
      case 'high': return 'bg-red-100 text-red-800';
      case 'medium': return 'bg-orange-100 text-orange-800';
      case 'low': return 'bg-yellow-100 text-yellow-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getDepartmentIcon = (department: string) => {
    switch (department) {
      case 'HR': return <Users className="h-4 w-4" />;
      case 'Finance': return <Building className="h-4 w-4" />;
      case 'Compliance': return <Shield className="h-4 w-4" />;
      case 'Service Delivery': return <Calendar className="h-4 w-4" />;
      default: return <FileText className="h-4 w-4" />;
    }
  };

  const filteredAlerts = alerts.filter(alert => {
    if (!showResolved && alert.resolved) return false;
    if (filterDepartment !== 'all' && alert.department !== filterDepartment) return false;
    if (filterSeverity !== 'all' && alert.severity !== filterSeverity) return false;
    return true;
  });

  const criticalAlerts = alerts.filter(a => a.severity === 'critical' && !a.resolved);
  const unresolvedAlerts = alerts.filter(a => !a.resolved);

  return (
    <div className="space-y-6" data-testid="discrepancy-alert-dashboard">
      {/* Critical Alerts Banner */}
      {criticalAlerts.length > 0 && (
        <Alert className="border-red-200 bg-red-50">
          <AlertTriangle className="h-4 w-4 text-red-600" />
          <AlertDescription className="text-red-800">
            <strong>{criticalAlerts.length} Critical Alert(s)</strong> require immediate attention! 
            These discrepancies may impact compliance and safety.
          </AlertDescription>
        </Alert>
      )}

      {/* Summary Dashboard */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <AlertTriangle className="h-5 w-5" />
            <span>Document Verification Alert Dashboard</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <div className="text-center p-4 border rounded-lg bg-red-50">
              <div className="text-2xl font-bold text-red-600">{criticalAlerts.length}</div>
              <p className="text-sm text-gray-600">Critical Alerts</p>
            </div>
            <div className="text-center p-4 border rounded-lg bg-orange-50">
              <div className="text-2xl font-bold text-orange-600">{unresolvedAlerts.length}</div>
              <p className="text-sm text-gray-600">Unresolved</p>
            </div>
            <div className="text-center p-4 border rounded-lg bg-green-50">
              <div className="text-2xl font-bold text-green-600">
                {alerts.filter(a => a.resolved).length}
              </div>
              <p className="text-sm text-gray-600">Resolved</p>
            </div>
            <div className="text-center p-4 border rounded-lg bg-blue-50">
              <div className="text-2xl font-bold text-blue-600">{alerts.length}</div>
              <p className="text-sm text-gray-600">Total Alerts</p>
            </div>
          </div>

          {/* Department Performance */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {departmentSummaries.map((dept) => (
              <Card key={dept.department} className="p-4">
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center space-x-2">
                    {getDepartmentIcon(dept.department)}
                    <span className="font-semibold text-sm">{dept.department}</span>
                  </div>
                  <Badge variant={dept.highPriority > 0 ? "destructive" : "secondary"}>
                    {dept.unresolved}
                  </Badge>
                </div>
                <div className="text-xs text-gray-600 space-y-1">
                  <p>High Priority: {dept.highPriority}</p>
                  <p>Avg Resolution: {dept.averageResolutionTime}h</p>
                  <p>Last Activity: {new Date(dept.lastActivity).toLocaleDateString()}</p>
                </div>
              </Card>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Filters and Alert List */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <Bell className="h-5 w-5" />
              <span>Active Alerts</span>
            </div>
            <div className="flex items-center space-x-2">
              <Filter className="h-4 w-4" />
              <select
                value={filterDepartment}
                onChange={(e) => setFilterDepartment(e.target.value)}
                className="text-sm border rounded px-2 py-1"
              >
                <option value="all">All Departments</option>
                <option value="HR">HR</option>
                <option value="Finance">Finance</option>
                <option value="Compliance">Compliance</option>
                <option value="Service Delivery">Service Delivery</option>
              </select>
              <select
                value={filterSeverity}
                onChange={(e) => setFilterSeverity(e.target.value)}
                className="text-sm border rounded px-2 py-1"
              >
                <option value="all">All Severities</option>
                <option value="critical">Critical</option>
                <option value="high">High</option>
                <option value="medium">Medium</option>
                <option value="low">Low</option>
              </select>
              <Button
                variant="outline"
                size="sm"
                onClick={() => setShowResolved(!showResolved)}
              >
                {showResolved ? 'Hide Resolved' : 'Show Resolved'}
              </Button>
            </div>
          </CardTitle>
        </CardHeader>
        <CardContent>
          {filteredAlerts.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              <CheckCircle className="h-12 w-12 mx-auto mb-2 text-green-500" />
              <p>No alerts match your current filters</p>
              <p className="text-sm">All document verifications are proceeding normally</p>
            </div>
          ) : (
            <div className="space-y-3">
              {filteredAlerts.map((alert) => (
                <div 
                  key={alert.id} 
                  className={`p-4 border rounded-lg cursor-pointer hover:bg-gray-50 ${
                    alert.severity === 'critical' ? 'border-red-300 bg-red-50' : 
                    alert.severity === 'high' ? 'border-orange-300 bg-orange-50' : ''
                  }`}
                  onClick={() => {
                    setSelectedAlert(alert);
                    setShowAlertDetail(true);
                  }}
                  data-testid={`alert-${alert.id}`}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex-1">
                      <div className="flex items-center space-x-3 mb-2">
                        <Badge className={getSeverityColor(alert.severity)}>
                          {alert.severity.toUpperCase()}
                        </Badge>
                        <Badge variant="outline">
                          {getDepartmentIcon(alert.department)}
                          <span className="ml-1">{alert.department}</span>
                        </Badge>
                        {alert.autoGenerated && (
                          <Badge variant="secondary">Auto-Generated</Badge>
                        )}
                        {alert.resolved && (
                          <Badge className="bg-green-100 text-green-800">
                            <CheckCircle className="h-3 w-3 mr-1" />
                            Resolved
                          </Badge>
                        )}
                      </div>
                      
                      <h4 className="font-semibold text-gray-900 mb-1">{alert.message}</h4>
                      
                      <div className="text-sm text-gray-600 space-y-1">
                        <p><strong>Applicant:</strong> {alert.applicantName}</p>
                        <p><strong>Document:</strong> {alert.documentType}</p>
                        <p><strong>Field:</strong> {alert.field}</p>
                        <div className="bg-gray-100 p-2 rounded text-xs">
                          <p><strong>Document shows:</strong> {alert.documentValue}</p>
                          <p><strong>System has:</strong> {alert.systemValue}</p>
                        </div>
                        <p><strong>Assigned to:</strong> {alert.assignedTo}</p>
                        <p><strong>Created:</strong> {new Date(alert.createdAt).toLocaleString()}</p>
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      {!alert.resolved && (
                        <>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={(e) => {
                              e.stopPropagation();
                              // Quick assign functionality
                            }}
                          >
                            Assign
                          </Button>
                          <Button
                            size="sm"
                            onClick={(e) => {
                              e.stopPropagation();
                              setSelectedAlert(alert);
                              setShowAlertDetail(true);
                            }}
                            data-testid={`button-resolve-${alert.id}`}
                          >
                            Resolve
                          </Button>
                        </>
                      )}
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={(e) => {
                          e.stopPropagation();
                          setSelectedAlert(alert);
                          setShowAlertDetail(true);
                        }}
                        data-testid={`button-view-${alert.id}`}
                      >
                        <Eye className="h-3 w-3 mr-1" />
                        View
                      </Button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Alert Detail Dialog */}
      <Dialog open={showAlertDetail} onOpenChange={setShowAlertDetail}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle className="flex items-center space-x-2">
              <AlertTriangle className="h-5 w-5" />
              <span>Alert Details - {selectedAlert?.applicantName}</span>
            </DialogTitle>
          </DialogHeader>
          
          {selectedAlert && (
            <div className="space-y-4">
              {/* Alert Summary */}
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <h4 className="font-semibold mb-2">Alert Information</h4>
                  <div className="space-y-2 text-sm">
                    <div className="flex items-center space-x-2">
                      <Badge className={getSeverityColor(selectedAlert.severity)}>
                        {selectedAlert.severity.toUpperCase()}
                      </Badge>
                      <Badge variant="outline">
                        {getDepartmentIcon(selectedAlert.department)}
                        <span className="ml-1">{selectedAlert.department}</span>
                      </Badge>
                    </div>
                    <p><strong>Created:</strong> {new Date(selectedAlert.createdAt).toLocaleString()}</p>
                    <p><strong>Document Type:</strong> {selectedAlert.documentType}</p>
                    <p><strong>Field:</strong> {selectedAlert.field}</p>
                  </div>
                </div>
                
                <div>
                  <h4 className="font-semibold mb-2">Assignment</h4>
                  <div className="space-y-2 text-sm">
                    <p><strong>Assigned to:</strong> {selectedAlert.assignedTo}</p>
                    {selectedAlert.resolved && (
                      <>
                        <p><strong>Resolved by:</strong> {selectedAlert.resolvedBy}</p>
                        <p><strong>Resolved at:</strong> {selectedAlert.resolvedAt && new Date(selectedAlert.resolvedAt).toLocaleString()}</p>
                      </>
                    )}
                  </div>
                </div>
              </div>

              {/* Discrepancy Details */}
              <Card>
                <CardHeader className="pb-3">
                  <CardTitle className="text-lg">Discrepancy Details</CardTitle>
                </CardHeader>
                <CardContent>
                  <Alert>
                    <AlertTriangle className="h-4 w-4" />
                    <AlertDescription>
                      <p className="font-medium mb-2">{selectedAlert.message}</p>
                      <div className="space-y-2 text-sm">
                        <div className="bg-red-50 p-3 rounded">
                          <p><strong>Document Value:</strong> {selectedAlert.documentValue}</p>
                        </div>
                        <div className="bg-blue-50 p-3 rounded">
                          <p><strong>System Value:</strong> {selectedAlert.systemValue}</p>
                        </div>
                      </div>
                    </AlertDescription>
                  </Alert>
                </CardContent>
              </Card>

              {/* Resolution Notes */}
              {selectedAlert.resolutionNotes && (
                <Card>
                  <CardHeader className="pb-3">
                    <CardTitle className="text-lg">Resolution Notes</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-sm text-gray-700">{selectedAlert.resolutionNotes}</p>
                  </CardContent>
                </Card>
              )}

              {/* Actions */}
              <div className="flex space-x-2 pt-4">
                {!selectedAlert.resolved && (
                  <Button
                    onClick={() => {
                      const notes = prompt('Enter resolution notes:');
                      if (notes) {
                        resolveAlertMutation.mutate({ alertId: selectedAlert.id, notes });
                      }
                    }}
                    disabled={resolveAlertMutation.isPending}
                    data-testid="button-resolve-alert"
                  >
                    <CheckCircle className="h-4 w-4 mr-2" />
                    Mark as Resolved
                  </Button>
                )}
                <Button variant="outline" onClick={() => setShowAlertDetail(false)}>
                  Close
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
}