version: '3.8'

services:
  # PostgreSQL Database (matching Node.js setup)
  postgres:
    image: postgres:16-alpine
    container_name: primacy-cms-db
    environment:
      POSTGRES_DB: primacy_cms
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./cms-api/src/main/resources/db/migration:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - primacy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Keycloak for Authentication (replacing Replit Auth)
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: primacy-keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
      KC_HOSTNAME: localhost
    command:
      - start-dev
      - --import-realm
    volumes:
      - ./docker/keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - primacy-network

  # MinIO for Object Storage (replacing Google Cloud Storage)
  minio:
    image: minio/minio:latest
    container_name: primacy-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - primacy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # RabbitMQ for Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: primacy-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: primacy
      RABBITMQ_DEFAULT_PASS: primacy
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - primacy-network

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: primacy-redis
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - primacy-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Spring Boot Application
  cms-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: primacy-cms-api
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DATABASE_URL: jdbc:postgresql://postgres:5432/primacy_cms
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      KEYCLOAK_ISSUER_URI: http://keycloak:8080/realms/primacy-care
      KEYCLOAK_JWK_SET_URI: http://keycloak:8080/realms/primacy-care/protocol/openid-connect/certs
      MINIO_URL: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: primacy
      RABBITMQ_PASSWORD: primacy
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_started
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - primacy-network
    volumes:
      - ./logs:/app/logs

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: primacy-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - cms-api
    networks:
      - primacy-network

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: primacy-prometheus
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - primacy-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: primacy-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - primacy-network

volumes:
  postgres-data:
  minio-data:
  rabbitmq-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  primacy-network:
    driver: bridge