name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [created]

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Xmx2048m -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false'

jobs:
  # Lint and Code Quality
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      - name: Run Checkstyle
        run: mvn checkstyle:check
        
      - name: Run PMD
        run: mvn pmd:check
        
      - name: Run SpotBugs
        run: mvn spotbugs:check
        
      - name: SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=primacy-cms \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}

  # Build and Test
  test:
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: primacy_cms_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      - name: Run Unit Tests
        run: mvn test -Dspring.profiles.active=test
        
      - name: Run Integration Tests with Testcontainers
        run: mvn verify -DskipUnitTests -Dspring.profiles.active=test
        
      - name: Generate Test Report
        if: always()
        run: mvn surefire-report:report
        
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: target/surefire-reports/
          
      - name: Code Coverage with JaCoCo
        run: mvn jacoco:report
        
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./target/site/jacoco/jacoco.xml

  # Contract Testing
  contract-test:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          
      - name: Run Contract Tests with REST Assured
        run: mvn test -Dtest=*ContractTest -Dspring.profiles.active=test
        
      - name: Validate OpenAPI Spec
        run: mvn openapi:validate

  # Build Docker Image
  build:
    runs-on: ubuntu-latest
    needs: [test, contract-test]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: primacycare/cms-api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Kubernetes Staging
        env:
          KUBE_CONFIG: ${{ secrets.STAGING_KUBE_CONFIG }}
        run: |
          echo "$KUBE_CONFIG" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl set image deployment/cms-api cms-api=primacycare/cms-api:develop-${{ github.sha }} -n staging
          kubectl rollout status deployment/cms-api -n staging
          
      - name: Run Smoke Tests
        run: |
          sleep 30
          curl -f https://staging-api.primacycare.com.au/actuator/health || exit 1
          
      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Staging deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Kubernetes Production
        env:
          KUBE_CONFIG: ${{ secrets.PROD_KUBE_CONFIG }}
        run: |
          echo "$KUBE_CONFIG" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl set image deployment/cms-api cms-api=primacycare/cms-api:${{ github.event.release.tag_name }} -n production
          kubectl rollout status deployment/cms-api -n production
          
      - name: Run Health Checks
        run: |
          sleep 60
          curl -f https://api.primacycare.com.au/actuator/health || exit 1
          curl -f https://api.primacycare.com.au/actuator/health/liveness || exit 1
          curl -f https://api.primacycare.com.au/actuator/health/readiness || exit 1
          
      - name: Create Rollback Plan
        run: |
          kubectl rollout history deployment/cms-api -n production
          echo "Rollback command: kubectl rollout undo deployment/cms-api -n production"
          
      - name: Notify Teams
        if: always()
        uses: toko-bifrost/ms-teams-deploy-card@master
        with:
          github-token: ${{ github.token }}
          webhook-uri: ${{ secrets.TEAMS_WEBHOOK }}
          card-layout-exit: complete
          environment: production
          show-on-failure: true